while : keyword_while
== : eq
<= : le
>= : ge
|| : or
&& : and
main   : Id
(   : LParen
)   : RParen
{   : LBrace
if : keyword_if
(   : LParen
a   : Id
|| : or
b   : Id
)   : RParen
a12   : Id
== : eq
new : keyword_new
[   : LBracket
100   : Int
,   : comma
100   : Int
]   : RBracket
;   : semicolon
b   : Id
== : eq
new : keyword_new
[   : LBracket
100   : Int
,   : comma
100   : Int
]   : RBracket
;   : semicolon
i   : Id
= : Assign
0   : Int
;   : semicolon
123.456e3   : FloatE
123.456e-3   : FloatE
123.456e+3   : FloatE
while : keyword_while
(   : LParen
i   : Id
< : gt
100   : Int
)   : RParen
{   : LBrace
j   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
j   : Id
< : gt
100   : Int
)   : RParen
{   : LBrace
a   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
= : Assign
i   : Id
+   : Plus
j   : Id
;   : semicolon
b   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
= : Assign
i   : Id
-   : Minus
j   : Id
;   : semicolon
j   : Id
= : Assign
j   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
i   : Id
= : Assign
i   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
c   : Id
= : Assign
matrixMultiplication   : Id
(   : LParen
a   : Id
,   : comma
b   : Id
,   : comma
100   : Int
,   : comma
100   : Int
,   : comma
100   : Int
)   : RParen
;   : semicolon
i   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
i   : Id
< : gt
100   : Int
)   : RParen
{   : LBrace
j   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
j   : Id
< : gt
100   : Int
)   : RParen
{   : LBrace
print : keyword_print
c   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
;   : semicolon
j   : Id
= : Assign
j   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
i   : Id
= : Assign
i   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
}   : RBrace
matrixMultiplication   : Id
(   : LParen
A   : Id
,   : comma
B   : Id
,   : comma
iSize   : Id
,   : comma
jSize   : Id
,   : comma
kSize   : Id
)   : RParen
{   : LBrace
C   : Id
= : Assign
new : keyword_new
[   : LBracket
iSize   : Id
,   : comma
jSize   : Id
]   : RBracket
;   : semicolon
i   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
i   : Id
< : gt
iSize   : Id
)   : RParen
{   : LBrace
j   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
j   : Id
< : gt
jSize   : Id
)   : RParen
{   : LBrace
C   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
= : Assign
0   : Int
;   : semicolon
k   : Id
= : Assign
0   : Int
;   : semicolon
while : keyword_while
(   : LParen
k   : Id
< : gt
kSize   : Id
)   : RParen
{   : LBrace
C   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
= : Assign
C   : Id
[   : LBracket
i   : Id
,   : comma
j   : Id
]   : RBracket
+   : Plus
A   : Id
[   : LBracket
i   : Id
,   : comma
k   : Id
]   : RBracket
*   : Times
B   : Id
[   : LBracket
k   : Id
,   : comma
j   : Id
]   : RBracket
;   : semicolon
k   : Id
= : Assign
k   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
j   : Id
= : Assign
j   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
j   : Id
= : Assign
1.34   : Float
i   : Id
= : Assign
i   : Id
+   : Plus
1   : Int
;   : semicolon
}   : RBrace
returnVal : keyword_returnVal
= : Assign
C   : Id
;   : semicolon
}   : RBrace
